C51 COMPILER V9.52.0.0   TIMER                                                             04/08/2016 17:41:50 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN timer.OBJ
COMPILER INVOKED BY: F:\Keil\C51\BIN\C51.EXE timer.c LARGE BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          
   2          
   3          /*************  功能说明  **************
   4          
   5          本文件为STC15xxx系列的定时器初始化和中断程序,用户可以在这个文件中修改自己需要的中断程序.
   6          
   7          
   8          ******************************************/
   9          
  10          
  11          
  12          #include  "timer.h"
  13          extern u8 time_counter;//timer0 计数
  14          extern u8 line_counter;//黑线 计数
  15          extern bit update_flag;//timer1 计时标记
  16          
  17          /********************* Timer0中断函数************************/
  18          void timer0_int (void) interrupt TIMER0_VECTOR
  19          {
  20   1       //
  21   1       time_counter++;//100us
  22   1       
  23   1       /*
  24   1       //   test the timer
  25   1       if(time_counter>100)
  26   1       {
  27   1         time_counter=0;
  28   1         test_num++;
  29   1       }
  30   1       */
  31   1       
  32   1      
  33   1       if(time_counter>=100)
  34   1       {
  35   2          // P26 = ~P26;
  36   2        time_counter++;
  37   2        if(time_counter>=100) //100us*10
  38   2       {
  39   3         time_counter=0;
  40   3         update_flag=1;
  41   3      //    if(time_counter2>=20)//20*10*100us
  42   3      //    {
  43   3      //      time_counter2=0;
  44   3      //      update_dis=1;
  45   3      //    }
  46   3       }
  47   2      
  48   2      }
  49   1      }
  50          /********************* Timer1中断函数************************/
  51          void timer1_int (void) interrupt TIMER1_VECTOR
  52          {
  53   1       
  54   1      
  55   1      }
C51 COMPILER V9.52.0.0   TIMER                                                             04/08/2016 17:41:50 PAGE 2   

  56          
  57          /********************* Timer2中断函数************************/
  58          void timer2_int (void) interrupt TIMER2_VECTOR
  59          {
  60   1        //P10 = ~P10;
  61   1      }
  62          
  63          /************************ 定时器配置 ****************************/
  64          void  Timer_config(void)
  65          {
  66   1        TIM_InitTypeDef   TIM_InitStructure;          //结构定义
  67   1        TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;  //指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TI
             -M_8BitAutoReload,TIM_16BitAutoReloadNoMask
  68   1        TIM_InitStructure.TIM_Polity    = PolityLow;      //指定中断优先级, PolityHigh,PolityLow
  69   1        TIM_InitStructure.TIM_Interrupt = ENABLE;       //中断是否允许,   ENABLE或DISABLE
  70   1        TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;     //指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_
             -Ext
  71   1        TIM_InitStructure.TIM_ClkOut    = DISABLE;        //是否输出高速脉冲, ENABLE或DISABLE
  72   1        TIM_InitStructure.TIM_Value     = 65536UL - (MAIN_Fosc / 100000UL);   //初值,1/100000s  10us
  73   1        TIM_InitStructure.TIM_Run       = ENABLE;       //是否初始化后启动定时器, ENABLE或DISABLE
  74   1        Timer_Inilize(Timer0,&TIM_InitStructure);       //初始化Timer0    Timer0,Timer1,Timer2
  75   1      
  76   1        TIM_InitStructure.TIM_Mode      = TIM_16BitAutoReload;  //指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TI
             -M_8BitAutoReload,TIM_16BitAutoReloadNoMask
  77   1        TIM_InitStructure.TIM_Polity    = PolityLow;      //指定中断优先级, PolityHigh,PolityLow
  78   1        TIM_InitStructure.TIM_Interrupt = ENABLE;       //中断是否允许,   ENABLE或DISABLE
  79   1        TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;     //指定时钟源, TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_Ext
  80   1        TIM_InitStructure.TIM_ClkOut    = ENABLE;       //是否输出高速脉冲, ENABLE或DISABLE
  81   1        TIM_InitStructure.TIM_Value     = 65536UL - (MAIN_Fosc / 1000);   //初值,
  82   1        TIM_InitStructure.TIM_Run       = DISABLE;        //是否初始化后启动定时器, ENABLE或DISABLE
  83   1        Timer_Inilize(Timer1,&TIM_InitStructure);       //初始化Timer1    Timer0,Timer1,Timer2
  84   1      
  85   1        TIM_InitStructure.TIM_Interrupt = ENABLE;       //中断是否允许,   ENABLE或DISABLE. (注意: Timer2固定为16位自
             -动重装, 中断固定为低优先级)
  86   1        TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_12T;    //指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_
             -Ext
  87   1        TIM_InitStructure.TIM_ClkOut    = ENABLE;       //是否输出高速脉冲, ENABLE或DISABLE
  88   1        TIM_InitStructure.TIM_Value     = 65536UL - (MAIN_Fosc / (50*12));    //初值
  89   1        TIM_InitStructure.TIM_Run       = DISABLE;        //是否初始化后启动定时器, ENABLE或DISABLE
  90   1        Timer_Inilize(Timer2,&TIM_InitStructure);       //初始化Timer2    Timer0,Timer1,Timer2
  91   1      }
  92          
  93          
  94          //========================================================================
  95          // 函数: u8 Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  96          // 描述: 定时器初始化程序.
  97          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
  98          // 返回: 成功返回0, 空操作返回1,错误返回2.
  99          // 版本: V1.0, 2012-10-22
 100          //========================================================================
 101          u8  Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
 102          {
 103   1        if(TIM > Timer2)  return 1; //空操作
 104   1      
 105   1        if(TIM == Timer0)
 106   1        {
 107   2          TR0 = 0;    //停止计数
 108   2          if(TIMx->TIM_Interrupt == ENABLE)   ET0 = 1;  //允许中断
 109   2          else                  ET0 = 0;  //禁止中断
 110   2          if(TIMx->TIM_Polity == PolityHigh)    PT0 = 1;  //高优先级中断
 111   2          else                  PT0 = 0;  //低优先级中断
 112   2          if(TIMx->TIM_Mode >  TIM_16BitAutoReloadNoMask) return 2; //错误
C51 COMPILER V9.52.0.0   TIMER                                                             04/08/2016 17:41:50 PAGE 3   

 113   2          TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3:
             - 16位自动重装, 不可屏蔽中断
 114   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x80;  //12T
 115   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x80;  //1T
 116   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x04;  //对外计数或分频
 117   2          else                    TMOD &= ~0x04;  //定时
 118   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x01;  //输出时钟
 119   2          else              INT_CLKO &= ~0x01;  //不输出时钟
 120   2          
 121   2          TH0 = (u8)(TIMx->TIM_Value >> 8);
 122   2          TL0 = (u8)TIMx->TIM_Value;
 123   2          if(TIMx->TIM_Run == ENABLE) TR0 = 1;  //开始运行
 124   2          return  0;    //成功
 125   2        }
 126   1      
 127   1        if(TIM == Timer1)
 128   1        {
 129   2          TR1 = 0;    //停止计数
 130   2          if(TIMx->TIM_Interrupt == ENABLE)   ET1 = 1;  //允许中断
 131   2          else                  ET1 = 0;  //禁止中断
 132   2          if(TIMx->TIM_Polity == PolityHigh)    PT1 = 1;  //高优先级中断
 133   2          else                  PT1 = 0;  //低优先级中断
 134   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2; //错误
 135   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 136   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x40;  //12T
 137   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x40;  //1T
 138   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x40;  //对外计数或分频
 139   2          else                    TMOD &= ~0x40;  //定时
 140   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x02;  //输出时钟
 141   2          else              INT_CLKO &= ~0x02;  //不输出时钟
 142   2          
 143   2          TH1 = (u8)(TIMx->TIM_Value >> 8);
 144   2          TL1 = (u8)TIMx->TIM_Value;
 145   2          if(TIMx->TIM_Run == ENABLE) TR1 = 1;  //开始运行
 146   2          return  0;    //成功
 147   2        }
 148   1      
 149   1        if(TIM == Timer2)   //Timer2,固定为16位自动重装, 中断无优先级
 150   1        {
 151   2          AUXR &= ~(1<<4);  //停止计数
 152   2          if(TIMx->TIM_Interrupt == ENABLE)     IE2  |=  (1<<2);  //允许中断
 153   2          else                    IE2  &= ~(1<<2);  //禁止中断
 154   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 155   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~(1<<2);  //12T
 156   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  (1<<2);  //1T
 157   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  AUXR |=  (1<<3);  //对外计数或分频
 158   2          else                    AUXR &= ~(1<<3);  //定时
 159   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x04;  //输出时钟
 160   2          else              INT_CLKO &= ~0x04;  //不输出时钟
 161   2      
 162   2          TH2 = (u8)(TIMx->TIM_Value >> 8);
 163   2          TL2 = (u8)TIMx->TIM_Value;
 164   2          if(TIMx->TIM_Run == ENABLE) AUXR |=  (1<<4);  //开始运行
 165   2          return  0;    //成功
 166   2        }
 167   1        return 2; //错误
 168   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    559    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.52.0.0   TIMER                                                             04/08/2016 17:41:50 PAGE 4   

   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
